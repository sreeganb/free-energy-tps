* reaction.str

! *******************************************
! check if reaction happened, othwerwise loop
! *******************************************
lower

set ind 0
set ina 0
set forw 0
set back 0

!***  read coordinates from first slice ***
read coor card name first.crd

! Distance between OH2 and H1' (water O-H distance, reactant well)
quick sele segid QMMM .and. (type OH2') end sele segid QMMM .and. (type H1'') end
set disd ?DIST
! Distance between C8 and H5 (this bond is in tact in the reactant well)
quick sele segid QMMM .and. (type C8) end sele segid QMMM .and. (type H5) end
set disa ?DIST
! Distance between O4 and H1' (this bond is formed in the product well)
quick sele segid QMMM .and. (type O4) end sele segid QMMM .and. (type H1'') end
set disoh1 ?DIST
! Distance between OH2 and H5 (Water abstracts H5 proton and forms product)
quick sele segid QMMM .and. (type OH2') end sele segid QMMM .and. (type H5) end
set disoh2 ?DIST
! Distance between OE1 (GLU) and H2'' (hydrogen bonding is required for reaction)
quick sele segid QMMM .and. (type OE1) end sele segid QMMM .and. (type H2'') end
set disoh3 ?DIST


! Add additional constraints that will make sure that GLU is still unionized in the first frame
if @disd .le. 1.2 then ! OH2 and H1'
    if @disa .le. 1.3 then ! C8 and H5 
        !if @disoh3 .le. 2.1 then ! O4 and H1'
        !    if @disoh2 .ge. 1.7 then ! OH2 and H5
                set ind 1
        !    endif
        !endif
    endif
endif

!if @disd .ge. 1.7 then ! OH2 and H1'
!    if @disa .ge. 1.7 then ! C8 and H5 
        if @disoh1 .le. 1.2 then ! O4 and H1'
            if @disoh2 .le. 1.2 then ! OH2 and H5
                set ina 1
            endif
        endif
!    endif
!endif

!***  read coordinates from last slice ***
read coor card name last.crd

! Distance between OH2 and H1' (water O-H distance, reactant well)
quick sele segid QMMM .and. (type OH2') end sele segid QMMM .and. (type H1'') end
set disd ?DIST
! Distance between C8 and H5 (this bond is in tact in the reactant well)
quick sele segid QMMM .and. (type C8) end sele segid QMMM .and. (type H5) end
set disa ?DIST
! Distance between O4 and H1' (this bond is formed in the product well)
quick sele segid QMMM .and. (type O4) end sele segid QMMM .and. (type H1'') end
set disoh1 ?DIST
! Distance between OH2 and H5 (Water abstracts H5 proton and forms product)
quick sele segid QMMM .and. (type OH2') end sele segid QMMM .and. (type H5) end
set disoh2 ?DIST

! Make sure Inosine is formed, which means H transferred from GLU to N
! O--C bind formed and N--C bond broken 
!if @disd .ge. 1.7 then ! OH2 and H1'
!    if @disa .ge. 1.7 then ! C8 and H5 
        if @disoh1 .le. 1.2 then ! O4 and H1'
            if @disoh2 .le. 1.2 then ! OH2 and H5
                set ina 2
            endif
        endif
!    endif
!endif

if @disd .le. 1.2 then ! OH2 and H1'
    if @disa .le. 1.3 then ! C8 and H5 
        !if @disoh1 .ge. 1.7 then ! O4 and H1'
        !    if @disoh2 .ge. 1.7 then ! OH2 and H5
                set ind 2
        !    endif
        !endif
    endif
endif

system "rm -rf first.crd"
system "rm -rf last.crd"

if @ind .eq. 1 then
if @ina .eq. 2 then
  set forw 1
endif
endif
if @ind .eq. 2 then
if @ina .eq. 1 then
  set back 1
endif
endif

!  succesful, but trajectory is backwards in time
if @back .eq. 1 then
  stream reverse.str
  stream distance.str
  stop
endif

!  succesful
IF @forw .eq. 1 then
  stream merge.str
  stream distance.str
  stop
endif
! Just debugging, change this later on
!stream merge.str
stream bonds.str

return
